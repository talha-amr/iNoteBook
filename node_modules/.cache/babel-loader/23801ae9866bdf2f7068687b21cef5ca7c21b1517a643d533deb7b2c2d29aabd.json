{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web Dev\\\\React js\\\\inotebook\\\\src\\\\context\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NoteState(props) {\n  _s();\n  const host = \"http://localhost:5000/\";\n  createNote = \"/createNote\";\n  updateNote = \"/updatenote/:id put\";\n  delteNote = \"/deleteNote/:id put\";\n  const [notes, setNotes] = useState([]);\n  const hardcodeNotes = [];\n  const getNotes = async () => {\n    const response = await fetch(`${host}api/notes/fetchallnotes`, {\n      method: 'GET',\n      headers: {\n        'Accept': '*/*',\n        'User-Agent': 'Thunder Client (https://www.thunderclient.com)',\n        'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjg5MWZkNGQyNGQ1ODJhZjE1YjliN2JlIn0sImlhdCI6MTc1NDQ2MzgwMn0.gKhLAuMPCQNf0DjGdAzTVgHa85VmItPk408CXuOdMe8',\n        'Content-Type': 'application/json'\n      }\n    });\n    const allNotes = await response.json();\n    console.log(allNotes);\n    setNotes(allNotes);\n  };\n  function addNote(title1, description1, tag1) {\n    const newNote = {\n      _id: Math.random().toString(),\n      user: \"6891fd4d24d582af15b9b7be\",\n      title: title1,\n      description: description1,\n      tag: tag1,\n      date: new Date().toISOString(),\n      __v: 0\n    };\n    setNotes(notes.concat(newNote));\n  }\n  function deleteNote(id) {\n    console.log(\"the id is\" + id);\n    setNotes(notes.filter(note => {\n      return note._id !== id;\n    }));\n  }\n  async function editNote(id, title, description, tag) {\n    const response = await fetch(`${host}api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': 'YOUR_AUTH_TOKEN'\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const updatedNote = await response.json();\n    const newNotes = notes.map(note => {\n      if (note._id === id) {\n        return updatedNote;\n      }\n      return note;\n    });\n    setNotes(newNotes);\n  }\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      getNotes,\n      editNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(NoteState, \"GQLmJKrKSWtt27ULSmYSMpXke/c=\");\n_c = NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","createNote","updateNote","delteNote","notes","setNotes","hardcodeNotes","getNotes","response","fetch","method","headers","allNotes","json","console","log","addNote","title1","description1","tag1","newNote","_id","Math","random","toString","user","title","description","tag","date","Date","toISOString","__v","concat","deleteNote","id","filter","note","editNote","body","JSON","stringify","updatedNote","newNotes","map","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Web Dev/React js/inotebook/src/context/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\"; \r\nimport NoteContext from \"./NoteContext\";\r\n\r\nexport default function NoteState(props) {\r\n  const host=\"http://localhost:5000/\"\r\n  createNote=\"/createNote\"\r\n  updateNote=\"/updatenote/:id put\"\r\n  delteNote=\"/deleteNote/:id put\"\r\n   const [notes, setNotes] = useState([]);\r\n  const hardcodeNotes = [ ];\r\nconst getNotes = async () => {\r\n  const response = await fetch(`${host}api/notes/fetchallnotes`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Accept': '*/*',\r\n      'User-Agent': 'Thunder Client (https://www.thunderclient.com)',\r\n      'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjg5MWZkNGQyNGQ1ODJhZjE1YjliN2JlIn0sImlhdCI6MTc1NDQ2MzgwMn0.gKhLAuMPCQNf0DjGdAzTVgHa85VmItPk408CXuOdMe8',\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n  const allNotes = await response.json(); \r\n  console.log(allNotes);\r\n  setNotes(allNotes)\r\n};\r\n\r\n  function addNote(title1, description1, tag1) {\r\n\r\n    const newNote = {\r\n      _id: Math.random().toString(), \r\n      user: \"6891fd4d24d582af15b9b7be\",\r\n      title: title1,\r\n      description: description1,\r\n      tag: tag1,\r\n      date: new Date().toISOString(),\r\n      __v: 0\r\n    };\r\n    setNotes(notes.concat(newNote));\r\n  }\r\nfunction deleteNote(id){\r\n  console.log(\"the id is\"+id)\r\n  setNotes(notes.filter((note)=>{return note._id!==id}))\r\n}\r\nasync function editNote(id, title, description, tag) {\r\n  const response = await fetch(`${host}api/notes/updatenote/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'auth-token': 'YOUR_AUTH_TOKEN'\r\n    },\r\n    body: JSON.stringify({ title, description, tag })\r\n  });\r\n\r\n  const updatedNote = await response.json();\r\n\r\n  const newNotes = notes.map(note => {\r\n    if (note._id === id) {\r\n      return updatedNote; \r\n    }\r\n    return note;\r\n  });\r\n\r\n  setNotes(newNotes);\r\n}\r\n\r\n  return (\r\n    <NoteContext.Provider value={{notes,addNote,deleteNote,getNotes,editNote}}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}